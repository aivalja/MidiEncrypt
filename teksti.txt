topic
    about_assignment_operators

short description
    describes how to use operators to assign values to variables.


long description
    assignment operators assign one or more values to a variable. they can
    perform numeric operations on the values before the assignment.


    windows powershell supports the following assignment operators.


    operator  description  
    -------   -----------
    =         sets the value of a variable to the specified value.

    +=        increases the value of a variable by the specified value, or 
              appends the specified value to the existing value.

    -=        decreases the value of a variable by the specified value.
 
    *=        multiplies the value of a variable by the specified value, or
              appends the specified value to the existing value.
 
    /=        divides the value of a variable by the specified value.
 
    %=        divides the value of a variable by the specified value and 
              then assigns the remainder (modulus) to the variable.

    ++        increases the value of a variable, assignable property, or 
              array element by 1.

    --        decreases the value of a variable, assignable property, or 
              array element by 1.

 

  syntax
    the syntax of the assignment operators is as follows:


        <assignable-expression> <assignment-operator> <value>


    assignable expressions include variables and properties.  the value can be 
    a single value, an array of values, or a command, expression, or statement.


    the increment and decrement operators are unary operators. each has prefix 
    and postfix versions.


        <assignable-expression><operator>
        <operator><assignable-expression>


    the assignable expression must a number or it must be convertible to a 
    number.


  assigning values
    variables are named memory spaces that store values. you store the values
    in variables by using the assignment operator (=). the new value can
    replace the existing value of the variable, or you can append a new value
    to the existing value.


    the basic assignment operator is the equal sign (=)(ascii 61). for example,
    the following statement assigns the value windows powershell to the 
    $myshell variable:


        $myshell = "windows powershell" 


    when you assign a value to a variable in windows powershell, the variable
    is created if it did not already exist. for example, the first of the 
    following two assignement statements creates the $a variable and assigns
    a value of 6 to $a. the second assignment statement assigns a value
    of 12 to $a. the first statement creates a new variable. the second
    statement changes only its value:


        $a = 6
        $a = 12

 
    variables in windows powershell do not have a specific data type unless you
    cast them. when a variable contains only one object, the variable takes the
    data type of that object. when a variable contains a collection of objects,
    the variable has the system.object data type. therefore, you can assign any
    type of object to the collection. the following example shows that you can
    add process objects, service objects, strings, and integers to a variable
    without generating an error: 


        $a = get-process
        $a += get-service
        $a += "string"
        $a += 12
 

    because the assignment operator (=) has a lower precedence than the
    pipeline operator (|), parentheses are not required to assign the result
    of a command pipeline to a variable. for example, the following command 
    sorts the services on the computer and then assigns the sorted services
    to the $a variable:


        $a = get-service | sort name


    you can also assign the value created by a statement to a variable, as in 
    the following example: 


        $a = if ($b -lt 0) { 0 } else { $b }


    this example assigns 0 to the $a variable if the value of $b is less 
    than 0. it assigns the value of $b to $a if the value of $b is not less 
    than zero. 

 

  the assignment operator (=)
    the assignment operator (=) assigns values to variables. if the variable 
    already has a value, the assignment operator (=) replaces the value 
    without warning.


    the following statement assigns the integer value 6 to the $a variable:


        $a = 6 

    to assign a string value to a variable, enclose the string value in
    quotation marks, as follows:


        $a = "baseball" 


    to assign an array (multiple values) to a variable, separate the values 
    with commas, as follows:


        $a = "apple", "orange", "lemon", "grape"
 

    to assign a hash table to a variable, use the standard hash table notation 
    in windows powershell. type an at sign (@) followed by key/value pairs that
    are separated by semicolons (;) and enclosed in braces ({ }). for example,
    to assign a hash table to the $a variable, type:


        $a = @{one=1; two=2; three=3} 


    to assign hexadecimal values to a variable, precede the value with "0x". 
    windows powershell converts the hexadecimal value (0x10) to a decimal 
    value (in this case, 16) and assigns that value to the $a variable. for 
    example, to assign a value of 0x10 to the $a variable, type:


        $a = 0x10 


    to assign an exponential value to a variable, type the root number, the 
    letter "e", and a number that represents a multiple of 10. for example, to 
    assign a value of 3.1415 to the power of 1,000 to the $a variable, type:


        $a = 3.1415e3 


    windows powershell can also convert kilobytes (kb), megabytes (mb), and 
    gigabytes (gb) into bytes. for example, to assign a value of 10 kilobytes
    to the $a variable, type:


        $a = 10kb


  the assignment by addition operator (+=)
    the assignment by addition operator (+=) either increments the value of a
    variable or appends the specified value to the existing value. the action 
    depends on whether the variable has a numeric or string type and whether
    the variable contains a single value (a scalar) or multiple values 
    (a collection).


    the += operator combines two operations. first, it adds, and then it
    assigns. therefore, the following statements are equivalent:


        $a += 2
        $a = ($a + 2)

 
    when the variable contains a single numeric value, the += operator 
    increments the existing value by the amount on the right side of the
    operator. then, the operator assigns the resulting value to the variable.
    the following example shows how to use the += operator to increase the
    value of a variable:


        c:\ps> $a = 4
        c:\ps> $a += 2
        c:\ps> $a
        6
 

    when the value of the variable is a string, the value on the right side of 
    the operator is appended to the string, as follows: 


        c:\ps> $a = "windows"
        c:\ps> $a +- " powershell"
        c:\ps> $a
        windows powershell 


    when the value of the variable is an array, the += operator appends the 
    values on the right side of the operator to the array. unless the array is 
    explicitly typed by casting, you can append any type of value to the array,
    as follows:


        c:\ps> $a = 1,2,3
        c:\ps> $a += 2
        c:\ps> $a
        1
        2
        3
        2
        c:\ps> $a += "string"
        c:\ps> $a
        1
        2
        3
        2
        string

 
    when the value of a variable is a hash table, the += operator appends the 
    value on the right side of the operator to the hash table. however, because 
    the only type that you can add to a hash table is another hash table, all 
    other assignments fail.


    for example, the following command assigns a hash table to the $a variable.
    then, it uses the += operator to append another hash table to the existing
    hash table, effectively adding a new key/value pair to the existing hash
    table. this command succeeds, as shown in the output:


        c:\ps> $a = @{a = 1; b = 2; c = 3}
        c:\ps> $a += @{mode = "write"}
        c:\ps> $a
        name                           value
        ----                           -----
        a                              1
        b                              2
        mode                           write
        c                              3


    the following command attempts to append an integer (1) to the hash table
    in the $a variable. this command fails:


        c:\ps> $a = @{a = 1; b = 2; c = 3}
        c:\ps> $a += 1
        you can add another hash table only to a hash table.
        at line:1 char:6
        + $a += <<<<  1


  the assignment by subtraction operator (-=)
    the assignment by subtraction operator (-=) decrements the value of a 
    variable by the value that is specified on the right side of the operator.
    this operator cannot be used with string variables, and it cannot be used
    to remove an element from a collection.


    the -= operator combines two operations. first, it subtracts, and then it 
    assigns. therefore, the following statements are equivalent:


        $a -= 2
        $a = ($a - 2)

 
    the following example shows how to use of the -= operator to decrease the 
    value of a variable:


        c:\ps> $a = 8
        c:\ps> $a -= 2
        c:\ps> $a
        6

 
    you can also use the -= assignment operator to decrease the value of a 
    member of a numeric array. to do this, specify the index of the array
    element that you want to change. in the following example, the value of the
    third element of an array (element 2) is decreased by 1:


        c:\ps> $a = 1,2,3
        c:\ps> $a[2] -= 1.
        c:\ps> $a
        1
        2
        2

 
    you cannot use the -= operator to delete the values of a variable. to 
    delete all the values that are assigned to a variable, use the clear-item 
    or clear-variable cmdlets to assign a value of $null or "" to the variable.


        $a = $null 


    to delete a particular value from an array, use array notation to assign a 
    value of $null to the particular item. for example, the following statement
    deletes the second value (index position 1) from an array:



        c:\ps> $a = 1,2,3
        c:\ps> $a
        1
        2
        3

        c:\ps> $a[1] = $null
        c:\ps> $a
        1
        3
 

    to delete a variable, use the remove-variable cmdlet. this method is useful
    when the variable is explicitly cast to a particular data type, and you 
    want an untyped variable. the following command deletes the $a variable:


        remove-variable a
 

  the assignment by multiplication operator (*=)
    the assignment by multiplication operator (*=) multiplies a numeric value
    or appends the specified number of copies of the string value of a 
    variable. 


    when a variable contains a single numeric value, that value is multiplied 
    by the value on the right side of the operator. for example, the following 
    example shows how to use the *= operator to multiply the value of a 
    variable:


        c:\ps> $a = 3
        c:\ps> $a *= 4
        c:\ps> $a
        12
 

    in this case, the *= operator combines two operations. first, it 
    multiplies, and then it assigns. therefore, the following statements are
    equivalent:


        $a *= 2
        $a = ($a * 2)

 
    when a variable contains a string value, windows powershell appends the 
    specified number of strings to the value, as follows:


        c:\ps> $a = "file"
        c:\ps> $a *= 4 
        c:\ps> $a
        filefilefilefile

 
    to multiply an element of an array, use an index to identify the element 
    that you want to multiply. for example, the following command multiplies 
    the first element in the array (index position 0) by 2:


        $a[0] *= 2
 

  the assignment by division operator (/=)
    the assignment by division operator (/=) divides a numeric value by the 
    value that is specified on the right side of the operator. the operator
    cannot be used with string variables.


    the /= operator combines two operations. first, it divides, and then it 
    assigns. therefore, the following two statements are equivalent:


        $a /= 2
        $a = ($a / 2)

 
    for example, the following command uses the /= operator to divide the value
    of a variable:


        c:\ps> $a = 8
        c:\ps> $a /=2
        c:\ps> $a
        4

 
    to divide an element of an array, use an index to identify the element that
    you want to change. for example, the following command divides the second 
    element in the array (index position 1) by 2:


        $a[1] /= 2
 

  the  assignment by modulus operator (%=)
    the assignment by modulus operator (%=) divides the value of a variable by
    the value on the right side of the operator. then, the %= operator assigns 
    the remainder (known as the modulus) to the variable. you can use this 
    operator only when a variable contains a single numeric value. you cannot
    use this operator when a variable contains a string variable or an array.


    the %= operator combines two operations. first, it divides and determines 
    the remainder, and then it assigns the remainder to the variable. 
    therefore, the following statements are equivalent:


        $a %= 2
        $a = ($a % 2)

 
    the following example shows how to use the %= operator to save the modulus 
    of a quotient:


        c:\ps> $a = 7
        c:\ps> $a %= 4
        c:\ps> $a
        3


  the increment and decrement operators

    the increment operator (++) increases the value of a variable by 1. when
    you use the increment operator in a simple statement, no value is returned.
    to view the result, display the value of the variable, as follows:


        c:\ps> $a = 7
        c:\ps> ++$a
        c:\ps> $a
        8


    to force a value to be returned, enclose the variable and the operator in 
    parentheses, as follows:


        c:\ps> $a = 7
        c:\ps> (++$a)
        8


    the increment operator can be placed before (prefix) or after (postfix) a 
    variable. the prefix version of the operator increments a variable before 
    its value is used in the statement, as follows:


        c:\ps> $a = 7
        c:\ps> $c = ++$a
        c:\ps> $a
        8
        c:\ps> $c
        8


    the postfix version of the operator increments a variable after its value 
    is used in the statement. in the following example, the $c and $a variables
    have different values because the value is assigned to $c before $a 
    changes:


        c:\ps> $a = 7
        c:\ps> $c = $a++
        c:\ps> $a
        8
        c:\ps> $c
        7


    the decrement operator (--) decreases the value of a variable by 1. as with 
    the increment operator, no value is returned when you use the operator in a
    simple statement. use parentheses to return a value, as follows:


        c:\ps> $a = 7
        c:\ps> --$a
        c:\ps> $a
        6
        c:\ps> (--$a)
        5


    the prefix version of the operator decrements a variable before its value 
    is used in the statement, as follows:


        c:\ps> $a = 7
        c:\ps> $c = --$a
        c:\ps> $a
        6
        c:\ps> $c
        6


    the postfix version of the operator decrements a variable after its value 
    is used in the statement. in the following example, the $d and $a variables
    have different values because the value is assigned to $d before $a 
    changes:


        c:\ps> $a = 7
        c:\ps> $d = $a--
        c:\ps> $a
        6
        c:\ps> $d
        7


  microsoft .net framework types
    by default, when a variable has only one value, the value that is assigned
    to the variable determines the data type of the variable. for example, the 
    following command creates a variable that has the integer (system.int32)
    type:


        $a = 6 


    to find the .net framework type of a variable, use the gettype method and
    its fullname property, as follows. be sure to include the parentheses after
    the gettype method name, even though the method call has no arguments:


        c:\ps> $a = 6 
        c:\ps> $a.gettype().fullname 
        system.int32 


    to create a variable that contains a string, assign a string value to the 
    variable. to indicate that the value is a string, enclose it in quotation
    marks, as follows:


        c:\ps> $a = "6"
        c:\ps> $a.gettype().fullname
        system.string

 
    if the first value that is assigned to the variable is a string, windows
    powershell treats all operations as string operations and casts new values
    to strings. this occurs in the following example:


        c:\ps> $a = "file"
        c:\ps> $a += 3
        c:\ps> $a
        file3

 
    if the first value is an integer, windows powershell treats all operations 
    as integer operations and casts new values to integers. this occurs in the
    following example:


        c:\ps> $a = 6
        c:\ps> $a += "3"
        c:\ps> $a
        9

 
    you can cast a new scalar variable as any .net framework type by placing
    the type name in brackets that precede either the variable name or
    the first assignment value. when you cast a variable, you can determine the
    types of data that can be stored in the variable. and, you can determine
    how the variable behaves when you manipulate it.


    for example, the following command casts the variable as a string type:


        c:\ps> [string]$a = 27
        c:\ps> $a += 3
        c:\ps> $a
        273
 

    the following example casts the first value, instead of casting the 
    variable:


        $a = [string]27

 
    when you cast a variable to a specific type, the common convention is to 
    cast the variable, not the value. however, you cannot recast the data type 
    of an existing variable if its value cannot be converted to the new data 
    type. to change the data type, you must replace its value, as follows:


        c:\ps> $a = "string"
        c:\ps> [int]$a
        cannot convert value "string" to type "system.int32". error: "input
        string was not in a correct format."
        at line:1 char:8
        + [int]$a <<<<

        c:\ps> [int]$a =3
 

    in addition, when you precede a variable name with a data type, the type
    of that variable is locked unless you explicitly override the type by
    specifying another data type. if you try to assign a value that is  
    incompatible with the existing type, and you do not explicitly override the
    type, windows powershell displays an error, as shown in the following
    example:


        c:\ps> $a = 3
        c:\ps> $a = "string"

        c:\ps> [int]$a = 3
        c:\ps> $a = "string"
        cannot convert value "string" to type "system.int32". error: "input
        string was not in a correct format."
        at line:1 char:3
        + $a <<<<  = "string"

        c:\ps> [string]$a = "string"
 

    in windows powershell, the data types of variables that contain multiple 
    items in an array are handled differently from the data types of variables
    that contain a single item. unless a data type is specifically assigned to
    an array variable, the data type is always system.object []. this data type
    is specific to arrays.


    sometimes, you can override the default type by specifying another 
    type. for example, the following command casts the variable as a string [] 
    array type:



        [string []] $a = "one", "two", "three"
 

    windows powershell variables can be any .net framework data type. in
    addition, you can assign any fully qualified .net framework data type that
    is available in the current process. for example, the following command
    specifies a system.datetime data type:


        [system.datetime]$a = "5/31/2005"

 
    the variable will be assigned a value that conforms to the system.datetime
    data type. the value of the $a variable would be the following:


        tuesday, may 31, 2005 12:00:00 am


  assigning multiple variables
    in windows powershell, you can assign values to multiple variables by using
    a single command. the first element of the assignment value is assigned to 
    the first variable, the second element is assigned to the second variable, 
    the third element to the third variable, and so on. for example, the 
    following command assigns the value 1 to the $a variable, the value 2 to
    the $b variable, and the value 3 to the $c variable:


        c:\ps> $a, $b, $c = 1, 2, 3

 
    if the assignment value contains more elements than variables, all the
    remaining values are assigned to the last variable. for example, the 
    following command contains three variables and five values:


        $a, $b, $c = 1, 2, 3, 4, 5

 
    therefore, windows powershell assigns the value 1 to the $a variable and
    the value 2 to the $b variable. it assigns the values 3, 4, and 5 to
    the $c variable. to assign the values in the $c variable to three other
    variables, use the following format:


        $d, $e, $f = $c


    this command assigns the value 3 to the $d variable, the value 4 to
    the $e variable, and the value 5 to the $f variable.


    you can also assign a single value to multiple variables by chaining the 
    variables. for example, the following command assigns a value of "three" 
    to all four variables:


        $a = $b = $c = $d = "three"

    
  variable-related cmdlets
    in addition to using an assignment operation to set a variable value, you 
    can also use the set-variable cmdlet. for example, the following command 
    uses set-variable to assign an array of 1, 2, 3 to the $a variable.


        set-variable -name a -value 1, 2, 3 

see also
    about_arrays
    about_hash_tables
    about_variables
    clear-variable
    remove-variable
    set-variable
